name: Go static checks

on:
  push:
    branches: [staging]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [staging]
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/gochecks.yaml'

jobs:
  gochecks:
    runs-on: ubuntu-latest
    name: All
    env:
      RUNGOGENERATE: false
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.2
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "mod=$(go env GOMOD)"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: ${{ github.job }}-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.mod) }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-go-

      - name: libgit2 cache
        id: libgit2-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install
          key: libgit2-${{ runner.os }}-${{ hashFiles(steps.goenv.outputs.mod) }}

      - name: Reset libgit2 pkg-config mtime
        if: steps.libgit2-cache.outputs.cache-hit == 'true'
        run: touch -cm ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install/lib/pkgconfig/libgit2.pc

      # Temporary workaround until this pipeline uses the 'myself' buildenv
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libssh2-1-dev

      - name: Install libgit2/git2go
        run: make git2go

      - name: Check that go.mod is tidy
        uses: protocol/multiple-go-modules@v1.2
        with:
          run: |
            git config --global --add safe.directory '*'
            go mod tidy
            if [[ -n $(git ls-files --other --exclude-standard --directory -- go.sum) ]]; then
              echo "go.sum was added by go mod tidy"
              exit 1
            fi
            git diff --exit-code -- go.sum go.mod

      - name: gofumpt
        if: success() || failure()  # run this step even if the previous one failed
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          args: --disable-all --enable=gofumpt
          skip-cache: true

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.52.2
          skip-cache: true

      - name: go generate
        uses: protocol/multiple-go-modules@v1.2
        if: (success() || failure()) && env.RUNGOGENERATE == 'true'
        with:
          run: |
            git clean -fd # make sure there aren't untracked files / directories
            go generate ./...
            # check if go generate modified or added any files
            if ! $(git add . && git diff-index HEAD --exit-code --quiet); then
              echo "go generate caused changes to the repository:"
              git status --short
              exit 1
            fi
