name: Tests

on:
  push:
    branches: [staging]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [staging]
    paths:
      - '**'
      - '!.github/**'
      - '.github/workflows/gotests.yaml'

jobs:
  gounit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - uses: actions/setup-go@v4
        with:
          go-version: 1.20.2
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "mod=$(go env GOMOD)"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: ${{ github.job }}-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.mod) }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-go-

      - name: libgit2 cache
        id: libgit2-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install
          key: libgit2-${{ runner.os }}-${{ hashFiles(steps.goenv.outputs.mod) }}

      - name: Reset libgit2 pkg-config mtime
        if: steps.libgit2-cache.outputs.cache-hit == 'true'
        run: touch -cm ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install/lib/pkgconfig/libgit2.pc

      # Temporary workaround until this pipeline uses the 'myself' buildenv
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libssh2-1-dev

      - name: Install libgit2/git2go
        run: make git2go

      - name: Run tests
        run: make test

  e2e-cli:
    name: Test kraft CLI commands
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.20.2
          cache: false

      - name: Set Go variables
        id: goenv
        run: |
          {
            echo "cache=$(go env GOCACHE)"
            echo "modcache=$(go env GOMODCACHE)"
            echo "mod=$(go env GOMOD)"
          } >>"$GITHUB_OUTPUT"

      - name: Go caches
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.goenv.outputs.cache }}
            ${{ steps.goenv.outputs.modcache }}
          key: ${{ github.job }}-${{ runner.os }}-go-${{ hashFiles(steps.goenv.outputs.mod) }}
          restore-keys: |
            ${{ github.job }}-${{ runner.os }}-go-

      - name: libgit2 cache
        id: libgit2-cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install
          key: libgit2-${{ runner.os }}-${{ hashFiles(steps.goenv.outputs.mod) }}

      - name: Reset libgit2 pkg-config mtime
        if: steps.libgit2-cache.outputs.cache-hit == 'true'
        run: touch -cm ${{ github.workspace }}/third_party/libgit2/git2go/static-build/install/lib/pkgconfig/libgit2.pc

      # Temporary workaround until this pipeline uses the 'myself' buildenv
      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            libssh2-1-dev

      - name: Install libgit2/git2go
        run: make git2go

      - name: Install Ginkgo
        run: go install github.com/onsi/ginkgo/v2/ginkgo

      - name: Install kraft
        run: make kraft DOCKER= DISTDIR="$(go env GOPATH)"/bin

      - name: Run unit tests
        run: ginkgo -v -p -randomize-all ./test/e2e/framework/...

      - name: Run e2e tests
        env:
          KRAFTKIT_NO_CHECK_UPDATES: true
        run: ginkgo -v -p -randomize-all ./test/e2e/cli/
